{"version":3,"sources":["face-points-lines-labels.jpg","face_mask_earloop.jpg","face_mask_laces.jpg","mask_modeling.jpg","sample_pattern.svg","DimensionInput.js","ruler.js","exportSvg.js","trig.js","PatternPolyline.js","PatternInfo.js","makePattern.js","NameInput.js","SelectorInput.js","Form.js","SewingInstructions.js","MeasurementFigure.js","ItemDescription.js","MeasurementInstructions.js","Introduction.js","Feedback.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","STEP_FOR_UNIT","DimensionInput","props","handleChange","bind","event","this","onValueChange","step","unit","Form","Group","as","Row","controlId","id","Col","md","Label","className","size","label","InputGroup","Control","type","placeholder","value","val","onChange","name","Append","Text","React","Component","Ruler","x1","y1","x2","y2","stroke","fill","strokeWidth","x","y","fontSize","fontFamily","cloneSvg","svg","document","getElementById","cloneNode","setAttribute","css","slice","call","head","querySelectorAll","filter","el","test","innerText","map","join","style","createElement","innerHTML","insertBefore","firstChild","degreeToRadian","degreeAngle","Math","PI","getX","degreeRadian","hypotenuse","cos","getY","sin","PatternPolyline","points","captions","PatternInfo","makeInfo","results","key","push","vals","transform","patternName","info","index","MaskPattern","setDimensions","earToNoseRiseAngle","noseChinAngle","tabWidth","filterOffset","chinThroatAngle","download","fileDownload","earTop","earBottom","earHeight","totalAngle","a","b","c","numerator","denominator","acos","getAngleA","bridgeToTip","earToBridge","earToNose","bridgePoint","nosePoint","aboveChin","chinPoint","belowChin","opposite","adjacent","bridgeNoseAngle","atan","aboveNose","belowNose","noseToChin","throatPoint","tabTop","tabBottom","setEarTop","setEarBottom","setBridgePoint","setNoseTipPoint","setChinPoint","setThroatPoint","setTabPoints","roundChin","roundNose","values","forEach","element","pointStr","point","xOffset","yOffset","Button","onClick","width","height","viewBox","getOutlinePoints","strokeDasharray","d","getFrontCurvePath","getUpperCurvePath","NameInput","SelectorInput","options","item","DEFAULT_MEASURES_IN_MM","earToThroat","chinToThroat","FromMillimetersToUserVisible","mm","round","ToMillimeters","cm","inches","MyForm","state","showLabels","Object","keys","buildInitialState","handleInputChange","target","newState","setState","console","log","checked","measure","parseFloat","measureInMM","Container","fluid","src","face_points_lines_labels","lg","ceil","noseToChinInMM","earHeightInMM","earToNoseInMM","earToThroatInMM","bridgeToTipInMM","earToBridgeInMM","chinToThroatInMM","SewingInstructions","href","MeasurementFigure","ListGroup","Item","justify","Figure","Image","imgSrc","Caption","caption","ItemDescription","horizontal","itemName","description","MeasurementInstructions","variant","Introduction","face_mask_earloop","alt","face_mask_laces","mask_modeling","Feedback","App","Tabs","defaultActiveKey","transition","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1e27532.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face-points-lines-labels.d07cb73d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_mask_earloop.7ac6b580.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_mask_laces.e6748e96.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mask_modeling.b0f2d417.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sample_pattern.60ab61ec.svg\";","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nconst STEP_FOR_UNIT = {\n    \"cm\": 0.1,\n    \"in\": 0.01\n}\n\nexport class DimensionInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        const step = STEP_FOR_UNIT[this.props.unit] || 1;\n        return (\n            <Form.Group as={Row} controlId={this.props.id}>\n                <Col md='5'>\n                    <Form.Label\n                        className='labelText' size='sm'>{this.props.label}\n                    </Form.Label>\n                </Col>\n                <Col md='6'>\n                    <InputGroup size='sm'>\n                        <Form.Control\n                            type=\"number\"\n                            placeholder={this.props.label}\n                            step={step}\n                            value={this.props.val}\n                            onChange={this.handleChange}\n                            name={this.props.id}\n                        >\n                        </Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text>{this.props.unit}</InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n","import React from 'react';\n\nexport class Ruler extends React.Component {\n    render() {\n        return (\n            <g>\n                <line\n                    x1='-25' y1='-30'\n                    x2='25' y2='-30'\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px' />\n                <text x='-25' y='-35'\n                    fontSize='4px'\n                    fontFamily='sans-serif'\n                >This line should be 5 cm (2 inches) long when printed</text>\n            </g>\n        )\n    }\n}\n","/**\n * Convert an SVG datauri into a PNG datauri.\n * @param {string} data SVG datauri.\n * @param {number} width Image width.\n * @param {number} height Image height.\n * @param {!Function} callback Callback.\n */\nfunction svgToPng_(data, width, height, callback) {\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  var img = new Image();\n\n  var pixelDensity = 5;\n  canvas.width = width * pixelDensity;\n  canvas.height = height * pixelDensity;\n  img.onload = function () {\n    context.drawImage(\n      img, 0, 0)//, 0, 0, width, height, -50, -50, canvas.width, canvas.height);\n    try {\n      var dataUri = canvas.toDataURL('image/png');\n      callback(dataUri);\n    } catch (err) {\n      console.warn('Error converting the workspace svg to a png');\n      callback('');\n    }\n  };\n  img.src = data;\n}\n\n/**\n* Create an SVG of the blocks on the workspace.\n* @param {!Function} callback Callback.\n*/\nexport function patternToSvg(callback) {\n  const width = 250;\n  const height = 250;\n\n  const svg = cloneSvg();\n  var svgAsXML = (new XMLSerializer()).serializeToString(svg);\n  console.log(svgAsXML);\n  svgAsXML = svgAsXML.replace(/&nbsp/g, '&#160');\n  var data = 'data:image/svg+xml,' + encodeURIComponent(svgAsXML);\n\n\n  svgToPng_(data, width, height, callback);\n}\n\nexport function cloneSvg() {\n\n  var pattern = document.getElementById('maskPattern');\n  var clone = pattern.cloneNode(true);\n  var svg = clone;\n\n  svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svg.setAttribute(\"style\", 'background-color: transparent');\n\n  var css = [].slice.call(document.head.querySelectorAll('style'))\n    .filter(function (el) {\n      return /\\.patternSvg/.test(el.innerText);\n    })\n    .map(function (el) {\n      return el.innerText;\n    })\n    .join('\\n');\n  var style = document.createElement('style');\n  style.innerHTML = css;\n  svg.insertBefore(style, svg.firstChild);\n\n  return svg;\n}\n","export function degreeToRadian(degreeAngle) {\n    return degreeAngle * Math.PI / 180;\n}\n\nexport function radianToDegree(radianAngle) {\n    return 180 * radianAngle / Math.PI;\n}\n\nexport function getX(degreeRadian, hypotenuse) {\n    return Math.cos(degreeRadian) * hypotenuse;\n}\n\nexport function getY(degreeRadian, hypotenuse) {\n    return Math.sin(degreeRadian) * hypotenuse;\n}\n\nexport function getAngleA(a, b, c) {\n    const numerator = b*b + c*c - a*a\n    const denominator = 2 * b * c;\n    return Math.acos(numerator / denominator);\n}","import React from 'react';\n\nexport class PatternPolyline extends React.Component {\n    render() {\n        return (\n            <>\n                <polyline\n                    points={this.props.points}\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px'\n                ></polyline>\n\n            </>)\n    }\n}\n\n","import React from 'react';\n\nconst captions = {\n    'noseToChin': 'Nose to chin',\n    'earHeight': 'Ear height',\n    'earToBridge': 'Ear to nose bridge',\n    'earToNose': 'Ear to nose tip',\n    'bridgeToTip': 'Nose bridge to nose tip',\n}\n\nconst units = 'mm'\n\n/**\n * Prints the values that were entered to create the pattern.\n */\nexport class PatternInfo extends React.Component {\n    makeInfo = function () {\n        const results = [];\n        for (let key in captions) {\n            results.push(captions[key] + ': ' + this.props.vals[key] + ' ' + units)\n        }\n        return results;\n    }\n    render() {\n        return (\n            <>\n                <g\n                    transform='translate(20,15)'\n                    fontSize='3px'\n                    fontFamily='sans-serif'>\n                    <text fontSize='4px' y='-5'>{this.props.vals.patternName}</text>\n                    {\n                        this.makeInfo().map((info, index) =>\n                            <text\n                                key={index}\n                                y={4 * index}>\n                                {info}\n                            </text>)\n                    }\n                </g>\n            </>)\n    }\n}","import React from 'react';\nimport fileDownload from 'svg-file-downloader';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Ruler } from './ruler';\nimport { cloneSvg } from './exportSvg';\nimport { degreeToRadian, getX, getY, getAngleA } from './trig';\nimport { PatternPolyline } from './PatternPolyline';\nimport { PatternInfo } from './PatternInfo';\n\nexport class MaskPattern extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setDimensions(props);\n\n        this.earToNoseRiseAngle = degreeToRadian(5);\n        this.noseChinAngle = degreeToRadian(90);\n        // The width of the tab for the strap, in mm\n        this.tabWidth = 15;\n        this.filterOffset = 5;\n        this.chinThroatAngle = degreeToRadian(10);\n        this.download = this.download.bind(this);\n    }\n    download() {\n        fileDownload(cloneSvg(), false, this.props.patternName + '.svg');\n    }\n\n    setEarTop() {\n        this.earTop = {\n            x: 0,\n            y: 0,\n            label: \"Ear top\"\n        };\n    }\n\n    setEarBottom() {\n        this.earBottom = {\n            x: 0,\n            y: this.props.earHeight,\n            label: \"Ear bottom\"\n        };\n    }\n\n    setBridgePoint() {\n        // Use the law of cosines on the triangle between points ABC to get the angle.\n        const innerAngle = getAngleA(\n            this.props.bridgeToTip,\n            this.props.earToBridge,\n            this.props.earToNose);\n        const totalAngle = innerAngle + this.earToNoseRiseAngle;\n\n        this.bridgePoint = {\n            x: getX(totalAngle, this.props.earToBridge),\n            y: -getY(totalAngle, this.props.earToBridge),\n            label: \"Bridge of nose\"\n        }\n    }\n\n    setNoseTipPoint() {\n        this.nosePoint = {\n            x: getX(this.earToNoseRiseAngle, this.props.earToNose),\n            y: -getY(this.earToNoseRiseAngle, this.props.earToNose),\n            label: \"Tip of nose\"\n        }\n    }\n\n    roundChin() {\n        const roundingDistance = 20;\n        this.aboveChin = {\n            x: this.chinPoint.x + getX(this.noseChinAngle, roundingDistance),\n            y: this.chinPoint.y - getY(this.noseChinAngle, roundingDistance),\n            label: \"c\"\n        }\n        this.belowChin = {\n            x: this.chinPoint.x - getX(this.chinThroatAngle, roundingDistance),\n            y: this.chinPoint.y + getY(this.chinThroatAngle, roundingDistance),\n            label: \"d\"\n        }\n    }\n\n    roundNose() {\n        const roundingDistance = 5;\n\n        // tan(angle) = opposite over adjacent\n        const opposite = this.nosePoint.y - this.bridgePoint.y;\n        const adjacent = this.nosePoint.x - this.bridgePoint.x;\n        const bridgeNoseAngle = Math.atan(opposite / adjacent);\n\n        this.aboveNose = {\n            x: this.nosePoint.x - getX(bridgeNoseAngle, roundingDistance),\n            y: this.nosePoint.y - getY(bridgeNoseAngle, roundingDistance),\n            label: \"a\"\n        }\n        this.belowNose = {\n            x: this.nosePoint.x - getX(this.noseChinAngle, roundingDistance),\n            y: this.nosePoint.y + getY(this.noseChinAngle, roundingDistance),\n            label: \"b\"\n        }\n    }\n\n    setChinPoint() {\n        this.chinPoint = {\n            x: this.nosePoint.x - getX(this.noseChinAngle, this.props.noseToChin + 12),\n            y: this.nosePoint.y + getY(this.noseChinAngle, this.props.noseToChin + 12),\n            label: \"Point of chin\"\n        }\n    }\n\n    setThroatPoint() {\n        // Chin to throat length: about an inch (plus 6mm seam allowance).\n        const x = this.chinPoint.x - getX(this.chinThroatAngle, 31);\n        const y = this.chinPoint.y + getY(this.chinThroatAngle, 31);\n        this.throatPoint = {\n            x: x,\n            y: y,\n            label: \"Throat\"\n        }\n    }\n\n    setTabPoints() {\n        this.tabTop = {\n            x: -this.tabWidth,\n            y: this.earTop.y,\n            label: \"Tab top\"\n        }\n        this.tabBottom = {\n            x: -this.tabWidth,\n            y: this.earBottom.y,\n            label: \"Tab bottom\"\n        }\n    }\n\n    setDimensions() {\n        this.setEarTop();\n        this.setEarBottom();\n        this.setBridgePoint();\n        this.setNoseTipPoint();\n        this.setChinPoint();\n        this.setThroatPoint();\n        this.setTabPoints()\n\n        this.roundChin();\n        this.roundNose();\n    }\n\n    /**\n     * Gets a list of points that will be connected by a straight line.\n     */\n    getOutlinePoints() {\n        let points = [\n            this.earTop,\n            this.tabTop,\n            this.tabBottom,\n            this.earBottom,\n            this.throatPoint\n        ]\n        let values = [];\n        points.forEach(element => values.push(element.x, element.y));\n        return values;\n    }\n\n    /**\n     * Get a list of points that need labels.\n     */\n    getLabelPoints() {\n        return [\n            this.earTop,\n            this.tabTop,\n            this.earBottom,\n            this.tabBottom,\n            this.bridgePoint,\n            this.aboveNose,\n            this.belowNose,\n            this.throatPoint,\n            this.aboveChin,\n            this.belowChin\n        ]\n    }\n\n    /**\n     * Gets the path for the curve at the front.\n     */\n    getFrontCurvePath() {\n        const points = [\n            this.aboveNose,\n            this.nosePoint,\n            { x: this.nosePoint.x + 10, y: this.nosePoint.y + (this.chinPoint.y - this.nosePoint.y) / 4 },\n            { x: this.nosePoint.x, y: this.nosePoint.y + 3 * (this.chinPoint.y - this.nosePoint.y) / 4 },\n            this.belowChin,\n            this.throatPoint,\n            this.throatPoint\n        ]\n        let pointStr = '';\n        points.forEach(point => { pointStr += point.x + ' ' + point.y + ' ' });\n        let path = 'm ' + this.bridgePoint.x + ' ' + this.bridgePoint.y + ' Q ' + pointStr;\n        return path;\n    }\n\n    /**\n     * Gets the path for the curve from the ear top to the nose.\n     */\n    getUpperCurvePath() {\n        let xOffset = (this.bridgePoint.x - this.earTop.x) / 3;\n        let yOffset = (this.bridgePoint.y - this.earTop.y) * .8;\n        const points = [\n            { x: this.bridgePoint.x - xOffset, y: this.bridgePoint.y - yOffset },\n            this.bridgePoint,\n            this.bridgePoint\n        ];\n\n        let pointStr = '';\n        points.forEach(point => { pointStr += point.x + ' ' + point.y + ' ' });\n        let path = 'm ' + this.earTop.x + ' ' + this.earTop.y + ' Q ' + pointStr;\n        return path;\n    }\n\n    render() {\n        this.setDimensions(this.props);\n\n        return (\n            <>\n                <Col>\n                    <Row className='downloadButton'>\n                        <Button onClick={this.download}>Download pattern</Button>\n                    </Row>\n                    <Row>\n                        <svg\n                            width='300mm'\n                            height='300mm'\n                            viewBox='-50 -55 250 245'\n                            id='maskPattern'>\n                            <Ruler />\n                            <PatternInfo vals={this.props} />\n                            <g transform='translate(0, 0)'>\n                                <PatternPolyline points={this.getOutlinePoints()}>\n                                </PatternPolyline>\n                                <line\n                                    x1={this.earTop.x + this.filterOffset}\n                                    y1={this.earTop.y}\n                                    x2={this.earBottom.x + this.filterOffset}\n                                    y2={this.earBottom.y}\n                                    strokeDasharray='4'\n                                    stroke='black'\n                                    strokeWidth='.5px'\n                                >\n                                </line>\n                                <path d={this.getFrontCurvePath()}\n                                    fill='none'\n                                    stroke='black'\n                                    strokeWidth='.5px'\n                                ></path>\n                                <path d={this.getUpperCurvePath()}\n                                    fill='none'\n                                    stroke='black'\n                                    strokeWidth='.5px'\n                                ></path>\n                            </g>\n                        </svg>\n                    </Row>\n                </Col>\n            </>)\n    }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport class NameInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        return (\n            <Form.Group as={Row} controlId={this.props.id}>\n                <Col md='5'>\n                    <Form.Label\n                        className='labelText' size='sm'>{this.props.label}\n                    </Form.Label>\n                </Col>\n                <Col md='6'>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder={this.props.label}\n                            value={this.props.val}\n                            onChange={this.handleChange}\n                            name={this.props.id}\n                             size='sm'\n                        >\n                        </Form.Control>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n","\n\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nexport class SelectorInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        return (\n            <Form.Group as={Row}>\n                <Col md='5'>\n                    <Form.Label\n                    className='labelText'>\n                        {this.props.label}</Form.Label></Col>\n                <Col md='6'>\n                    <Form.Control\n                        as=\"select\"\n                        onChange={this.handleChange}\n                        name={this.props.id}\n                    >  {this.props.options.map(\n                        (item) => \n                        <option \n                        key={item[1]} \n                        value={item[1]}\n                        >\n                            {item[0]}\n                            </option>\n                        )}\n                    </Form.Control></Col></Form.Group>\n        );\n    }\n}    \n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from \"react-bootstrap/Container\";\nimport { DimensionInput } from './DimensionInput';\nimport { MaskPattern } from './makePattern';\nimport face_points_lines_labels from './face-points-lines-labels.jpg';\nimport Image from 'react-bootstrap/Image';\nimport { NameInput } from './NameInput';\nimport { SelectorInput } from \"./SelectorInput\";\n\nconst DEFAULT_MEASURES_IN_MM = {\n    noseToChin: 95,\n    earHeight: 45,\n    earToNose: 115,\n    earToThroat: 90,\n    bridgeToTip: 30,\n    earToBridge: 110,\n    chinToThroat: 55\n};\nconst PLACEHOLDER_NAME = 'Your name here';\n\nconst MM_PER_IN = 25.4;\n\n// Converts the canon measure in millimeters to the requested unit, in a conveniently rounded number.\nconst FromMillimetersToUserVisible = {\n    \"mm\": mm => Math.round(mm),\n    \"cm\": mm => Math.round(mm) / 10,  // Rounded to 0.1cm\n    \"in\": mm => Math.round(100 * mm / MM_PER_IN) / 100  // Rounded to 0.01in\n}\n\n// Converts the measure in the requested unit to millimeters.\nconst ToMillimeters = {\n    \"mm\": mm => mm,\n    \"cm\": cm => cm * 10,\n    \"in\": inches => inches * MM_PER_IN\n}\n\nfunction buildInitialState() {\n    const state = {\n        unit: 'mm',\n        patternName: PLACEHOLDER_NAME,\n        showLabels: false\n    };\n    Object.keys(DEFAULT_MEASURES_IN_MM).forEach((key) => {\n        const mm = DEFAULT_MEASURES_IN_MM[key];\n        state[key] = mm;\n        state[key + 'InMM'] = mm;\n    });\n    return state;\n}\n\nclass MyForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = buildInitialState();\n        this.handleInputChange =\n            this.handleInputChange.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const name = target.name;\n        if (name === 'unit') {\n            const unit = target.value;\n            const newState = {\n                'unit': unit\n            };\n\n            // Convert existing values to new unit.\n            Object.keys(DEFAULT_MEASURES_IN_MM).forEach((key) => {\n                newState[key] = FromMillimetersToUserVisible[unit](this.state[key + \"InMM\"])\n            });\n\n            this.setState(newState);\n        } else if (name === 'patternName') {\n            this.setState({\n                'patternName': target.value\n            });\n        } else if (name === 'showLabels') {\n            console.log('show labels: ' + target.value);\n            this.setState({\n                'showLabels': target.checked\n            });\n        } else { // measurementChanged\n            const measure = parseFloat(target.value)\n            const measureInMM = ToMillimeters[this.state.unit](measure)\n            this.setState({\n                [name]: measure,\n                [name + 'InMM']: measureInMM\n            })\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Container fluid>\n                    <Row>\n                        <Col>\n                            <Image\n                                src={face_points_lines_labels}\n                                width={200} />\n                        </Col>\n                        <Col as={Form} md={7} lg={8}>\n                            <Row>\n                                <Col>\n                                    <NameInput\n                                        id=\"patternName\"\n                                        label=\"Name\"\n                                        val={this.state.patternName}\n                                        onValueChange={this.handleInputChange}>\n                                    </NameInput>\n                                </Col>\n                                <Col>\n                                    <SelectorInput\n                                        id=\"unit\"\n                                        label=\"Units\"\n                                        options={[\n                                            [\"mm\", \"mm\"],\n                                            [\"cm\", \"cm\"],\n                                            [\"inches\", \"in\"]\n                                        ]}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <DimensionInput\n                                        id=\"noseToChin\"\n                                        label=\"Nose to chin with mouth open to talk (C to D)\"\n                                        unit={this.state.unit}\n                                        val={this.state.noseToChin}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                    <DimensionInput\n                                        id=\"earHeight\"\n                                        label=\"Ear height at front of ear (A to E)\"\n                                        unit={this.state.unit}\n                                        val={this.state.earHeight}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                    <DimensionInput\n                                        id=\"earToBridge\"\n                                        label=\"Ear top to nose bridge (A to B)\"\n                                        unit={this.state.unit}\n                                        val={this.state.earToBridge}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                </Col>\n                                <Col>\n                                    <DimensionInput\n                                        id=\"earToNose\"\n                                        label=\"Ear top to nose tip (A to C)\"\n                                        unit={this.state.unit}\n                                        val={this.state.earToNose}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                    <DimensionInput\n                                        id=\"bridgeToTip\"\n                                        label=\"Nose bridge to nose tip (B to C)\"\n                                        unit={this.state.unit}\n                                        val={this.state.bridgeToTip}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Container>\n                <Container>\n                    <MaskPattern\n                        patternName={this.state.patternName}\n                        noseToChin={Math.ceil(this.state.noseToChinInMM)}\n                        earHeight={Math.ceil(this.state.earHeightInMM)}\n                        earToNose={Math.ceil(this.state.earToNoseInMM)}\n                        earToThroat={Math.ceil(this.state.earToThroatInMM)}\n                        bridgeToTip={Math.ceil(this.state.bridgeToTipInMM)}\n                        earToBridge={Math.ceil(this.state.earToBridgeInMM)}\n                        chinToThroat={Math.ceil(this.state.chinToThroatInMM)}\n                        showLabels={this.state.showLabels}\n                    />\n                </Container>\n            </>\n        );\n    }\n}\nexport default MyForm;\n","import React from 'react';\n\nexport class SewingInstructions extends React.Component {\n    render() {\n        return (\n            <>\n                <h2>Create your pattern</h2>\n                <p>\n                    Measure your face and use the Create Pattern tab to create and download your pattern.\n                </p>\n                <p>\n                    The downloaded file is an SVG (Scalable Vector Format). This is just an image, and all browsers can open it.\n                </p>\n                <p>\n                    Open your pattern with a web browser (Firefox, Chrome, Edge, Safari, etc) and print it.\n                </p>\n                <h2>Printing</h2>\n                <p>\n                    Use a ruler to check that the line at the top left is 5 cm (2 in) long.\n                </p>\n                <p>\n                    If it's the wrong length, adjust your print settings until the line is the correct length. (I've found that about 84% scale works best for me).\n                </p>\n                <p>Instructions for adjusting print settings:</p>\n                <ul>\n                    <li><a href='https://support.mozilla.org/en-US/kb/fix-printing-problems-firefox'>Firefox</a></li>\n                    <li><a href='https://support.apple.com/en-euro/guide/mac-help/mh26678/mac'>Safari</a></li>\n                    <li><a href='https://www.windowscentral.com/how-use-print-experience-new-microsoft-edge'>Edge</a></li>\n                    <li>Chrome: Open the print menu. Click the arrow to expand the 'More settings' dialog. Select 'Custom' for 'Scale'. Change the number in the box that shows up.</li>\n                </ul>\n\n                <h2>Cutting and sewing</h2>\n                <p>If you prefer video instructions, follow <a href=\"https://www.youtube.com/watch?v=KBR98YKAr7w&list=WL\">this excellent video</a> to make your mask.</p>\n                <p>If you prefer text and images, <a href=\"https://dhuratadavies.com/blogs/things-i-make-and-do/free-face-mask-pattern-and-tutorial\">this tutorial</a> walks through a similar constrction method.</p>\n                <p>The pattern includes a 1/4\" seam allowance.</p>\n                <p>To cut the lining fabric, cut along the dashed line at the ear.  Cut on the solid line for the main fabric.</p>\n                <h2>Adjustments</h2>\n                <p>Some people prefer to have the mask not reach all the way back to the ears.</p>\n                <p>If you're not using the filter pocket, you can just flip the tab in toward the center and sew it in place.</p>\n                <p>If you're using the filter pocket, you can decrease your ear-to-nose and ear-to-bridge lengths by 15mm for a similar effect.</p>\n            </>);\n    }\n}\n","import React from 'react';\nimport Figure from 'react-bootstrap/Figure';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nexport class MeasurementFigure extends React.Component {\n    render() {\n        return (\n            <ListGroup.Item justify='center'>\n            <Figure>\n                <Figure.Image\n                    src={this.props.imgSrc}\n                    width={500}\n                    height={500}\n                    fluid></Figure.Image>\n                <Figure.Caption>{this.props.caption}</Figure.Caption>\n            </Figure>\n            </ListGroup.Item>)\n    }\n}\n\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nexport class ItemDescription extends React.Component {\n    render() {\n        return (\n            <ListGroup horizontal>\n            <ListGroup.Item>{this.props.itemName}</ListGroup.Item>\n            <ListGroup.Item>{this.props.description}</ListGroup.Item>\n            </ListGroup>)\n    }\n}\n\n","import React from 'react';\nimport face_points_lines_labels from './face-points-lines-labels.jpg';\n\nimport { MeasurementFigure } from './MeasurementFigure';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { ItemDescription } from './ItemDescription';\n\nexport class MeasurementInstructions extends React.Component {\n    render() {\n        return (\n            <>\n                <ListGroup variant='flush'>\n                    <ListGroup.Item>To size your mask you will measure the distances between a few points on your face.</ListGroup.Item>\n                    <ListGroup.Item>When measuring, think about where you want the mask to sit on your face.</ListGroup.Item>\n                    <ItemDescription\n                        itemName='A'\n                        description='1/2\" forward from the top of your ear'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='B'\n                        description='The bridge of your nose, where you want the mask to sit'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='C'\n                        description='The tip of your nose'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='D'\n                        description='The point of your chin'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='E'\n                        description='1/2\" forward from the bottom of your ear'>\n                    </ItemDescription>\n                    <MeasurementFigure\n                        imgSrc={face_points_lines_labels}\n                        caption='The points and lines you will measure.'>\n                    </MeasurementFigure>\n                    <ListGroup.Item>To make these measurements, you need a string and a ruler.</ListGroup.Item>\n                    <ListGroup.Item>Start by cutting a piece of string about six inches long and tying a knot at one end.</ListGroup.Item>\n                    <ListGroup.Item>To measure a single line, place the knot at the start point on your face and hold it in place with a finger.</ListGroup.Item>\n                    <ListGroup.Item>Use your other hand to pull the string to the end point.</ListGroup.Item>\n                    <ListGroup.Item>Mark the end point by pinching the string with your fingers.</ListGroup.Item>\n                    <ListGroup.Item>Keeping the end point pinched, lay the string along the ruler to measure the length from the knot to the end point.</ListGroup.Item>\n                    <ItemDescription\n                        itemName='A to B'\n                        description='Point A (see above) to the bridge of your nose, following your cheekbone. For the bridge of the nose, use the point where you want the top of the mask to sit on your nose.'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='A to C'\n                        description='Point A (see above) to the point of your nose.'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='B to C'\n                        description='The bridge of your nose to the point of your nose.'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='C to D'\n                        description='The point of your nose to the tip of your chin. Measure this with your mouth open, as though you were talking.'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='A to E'\n                        description='The top of your ear to the bottom of your ear, measured about 1/2\" in front your ear or where you want the edge of the mask to be.'>\n                    </ItemDescription>\n                </ListGroup>\n            </>\n        );\n    }\n}\n\n","\nimport React from 'react';\nimport Jumbotron from 'react-bootstrap/Figure';\nimport face_mask_earloop from './face_mask_earloop.jpg';\nimport face_mask_laces from './face_mask_laces.jpg';\nimport sample_pattern from './sample_pattern.svg';\nimport mask_modeling from './mask_modeling.jpg';\n\nexport class Introduction extends React.Component {\n    render() {\n        return (\n            <Jumbotron>\n                <h1>Custom Mask Pattern Generator</h1>\n                <p>This is a utility for generating sewing patterns for custom masks, based on the dimensions of your face.</p>\n                <p>The pattern is similar to the <a href='https://www.craftpassion.com/face-mask-sewing-pattern/'>Craft Passion</a> pattern.</p>\n                <p>Some changes I made:</p>\n                <ul>\n                    <li>Smaller at the ear to avoid gaping.</li>\n                    <li>Longer at the front to avoid slipping when you talk.</li>\n                    <li>Easy to customize and reprint.</li>\n                    <li>A lighter curve at the front.</li>\n                </ul>\n                <p>My goals for the pattern are:</p>\n                <ul>\n                    <li>The mask stays up when you talk.</li>\n                    <li>The mask has minimal bulk in front of your mouth.</li>\n                    <li>The mask fits snugly, with no gaping at the nose, chin, or ears.</li>\n                    <li>The tool works well enough that you can use it to make masks for friends and family who don't live near you.</li>\n                </ul>\n                <p>I'm still iterating on the pattern and trying to dial in my math--if it doesn't fit right on you, please let me know and/or come back in a week to try again.</p>\n                <p>Use the tabs at the top of the page to navigate.</p>\n\n                <img\n                    src={face_mask_earloop}\n                    height='500'\n                    alt='Our model wearing a face mask with elastic earloops.'>\n                </img>\n                <img\n                    src={face_mask_laces}\n                    height='500'\n                    alt='Our model wearing a face mask with laces behind the neck and over the top of the head.'>\n                </img>\n                <img\n                    src={mask_modeling}\n                    height='500'\n                    alt='A person wearing the finished mask.'>\n                </img>\n\n\n                <p>Made by Rachel Fenichel. Last updated July 28 2020.</p>\n            </Jumbotron>)\n    }\n}\n\n","import React from 'react';\n\n\nexport class Feedback extends React.Component {\n    render() {\n        return (\n            <>\n                <p className='feedbackText'>Do you have suggestions for improving this tool? Have you found a bug in my math? Do you think my math checks out but my assumptions are wrong? </p>\n                <p className='feedbackText'>Fill out the <a href=\"https://forms.gle/maSWbYPFmoq8v5DE7\">feedback form</a>, or head over to <a href=\"https://github.com/fenichel/mask-pattern-generator/issues\">my GitHub repo</a> to file issues or make pull requests.</p>\n            </>)\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport MyForm from './Form.js';\nimport { SewingInstructions } from './SewingInstructions';\nimport { MeasurementInstructions } from './MeasurementInstructions';\nimport { Introduction } from './Introduction';\nimport { Feedback } from './Feedback';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs\n        defaultActiveKey=\"introduction\"\n        id=\"navtabs\"\n        transition={false}>\n          <Tab eventKey=\"introduction\" title=\"Introduction\">\n            <Introduction />\n          </Tab>\n        <Tab eventKey=\"measuring\" title=\"Measurement instructions\">\n\n          <MeasurementInstructions />\n        </Tab>\n        <Tab eventKey=\"createPattern\" title=\"Create Pattern\">\n          <MyForm />\n        </Tab>\n        <Tab eventKey=\"sewing\" title=\"Sewing instructions\">\n          <SewingInstructions />\n        </Tab>\n        {/* <Tab eventKey=\"theMath\" title=\"Show me the math!\">\n          <TheMath className='theMath' />\n        </Tab> */}\n      </Tabs>\n    <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}