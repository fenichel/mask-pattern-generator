{"version":3,"sources":["face_points_lines_labels2.jpg","face_points_labels_2.jpg","face_points_lines2.jpg","face_mask_earloop.jpg","face_mask_laces.jpg","theMath.svg","images sync //.jpg$","images/1.jpg","images/10.jpg","images/11.jpg","images/12.jpg","images/13.jpg","images/14.jpg","images/15.jpg","images/16.jpg","images/17.jpg","images/18.jpg","images/19.jpg","images/2.jpg","images/20.jpg","images/21.jpg","images/22.jpg","images/23.jpg","images/24.jpg","images/25.jpg","images/26.jpg","images/27.jpg","images/28.jpg","images/3.jpg","images/4.jpg","images/5.jpg","images/6.jpg","images/7.jpg","images/8.jpg","images/9.jpg","DimensionInput.js","CheckboxInput.js","ruler.js","VertexLabels.js","exportSvg.js","trig.js","PatternPolyline.js","PatternInfo.js","CutOnFold.js","makePattern.js","NameInput.js","SelectorInput.js","Form.js","images/sewingImages.js","SewingInstructions.js","MeasurementFigure.js","ItemDescription.js","MeasurementInstructions.js","Introduction.js","Feedback.js","TheMath.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","STEP_FOR_UNIT","DimensionInput","props","handleChange","bind","event","this","onValueChange","step","unit","Form","Group","as","Row","controlId","Col","md","Label","className","size","label","InputGroup","Control","type","placeholder","value","val","onChange","name","Append","Text","React","Component","Ruler","x1","y1","x2","y2","stroke","fill","strokeWidth","x","y","fontSize","fontFamily","VertexLabels","points","point","key","cx","cy","r","toFixed","cloneSvg","svg","document","getElementById","cloneNode","setAttribute","css","slice","call","head","querySelectorAll","filter","el","test","innerText","join","style","createElement","innerHTML","insertBefore","firstChild","degreeToRadian","degreeAngle","Math","PI","getX","degreeRadian","hypotenuse","cos","getY","sin","PatternPolyline","captions","PatternInfo","makeInfo","results","push","vals","transform","patternName","info","index","MaskPattern","setDimensions","earToNoseRiseAngle","noseChinAngle","tabWidth","chinThroatAngle","download","fileDownload","earTop","earBottom","earHeight","totalAngle","a","b","c","numerator","denominator","acos","getAngleA","bridgeToTip","earToBridge","earToNose","bridgePoint","nosePoint","aboveChin","chinPoint","belowChin","opposite","adjacent","bridgeNoseAngle","atan","aboveNose","belowNose","noseToChin","throatPoint","tabTop","tabBottom","setEarTop","setEarBottom","setBridgePoint","setNoseTipPoint","setChinPoint","setThroatPoint","setTabPoints","roundChin","roundNose","values","forEach","element","pointStr","xOffset","yOffset","console","log","path","Button","onClick","width","height","viewBox","getOutlinePoints","strokeDasharray","d","getFrontCurvePath","getUpperCurvePath","showLabels","getLabelPoints","NameInput","SelectorInput","options","item","DEFAULT_MEASURES_IN_MM","earToThroat","chinToThroat","FromMillimetersToUserVisible","mm","round","ToMillimeters","cm","inches","MyForm","state","buildInitialState","handleInputChange","target","newState","setState","checked","measure","parseFloat","measureInMM","Container","fluid","src","face_points_lines_labels2","lg","ceil","noseToChinInMM","earHeightInMM","earToNoseInMM","earToThroatInMM","bridgeToTipInMM","earToBridgeInMM","chinToThroatInMM","cache","require","SewingInstructions","href","MeasurementFigure","ListGroup","Item","justify","Figure","Image","imgSrc","Caption","caption","ItemDescription","horizontal","itemName","description","MeasurementInstructions","variant","face_points_labels_2","face_points_lines2","Introduction","face_mask_earloop","alt","face_mask_laces","Feedback","App","Tabs","defaultActiveKey","transition","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26bdedcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/face_points_lines_labels2.84efa164.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_points_labels_2.e8c859cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_points_lines2.6b16100e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_mask_earloop.7ac6b580.jpg\";","module.exports = __webpack_public_path__ + \"static/media/face_mask_laces.e6748e96.jpg\";","module.exports = __webpack_public_path__ + \"static/media/theMath.c9b290fa.svg\";","var map = {\n\t\"./1.jpg\": 62,\n\t\"./10.jpg\": 63,\n\t\"./11.jpg\": 64,\n\t\"./12.jpg\": 65,\n\t\"./13.jpg\": 66,\n\t\"./14.jpg\": 67,\n\t\"./15.jpg\": 68,\n\t\"./16.jpg\": 69,\n\t\"./17.jpg\": 70,\n\t\"./18.jpg\": 71,\n\t\"./19.jpg\": 72,\n\t\"./2.jpg\": 73,\n\t\"./20.jpg\": 74,\n\t\"./21.jpg\": 75,\n\t\"./22.jpg\": 76,\n\t\"./23.jpg\": 77,\n\t\"./24.jpg\": 78,\n\t\"./25.jpg\": 79,\n\t\"./26.jpg\": 80,\n\t\"./27.jpg\": 81,\n\t\"./28.jpg\": 82,\n\t\"./3.jpg\": 83,\n\t\"./4.jpg\": 84,\n\t\"./5.jpg\": 85,\n\t\"./6.jpg\": 86,\n\t\"./7.jpg\": 87,\n\t\"./8.jpg\": 88,\n\t\"./9.jpg\": 89\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 61;","module.exports = __webpack_public_path__ + \"static/media/1.593a9788.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.15e2d2c5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/11.caa69878.jpg\";","module.exports = __webpack_public_path__ + \"static/media/12.c63161e6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/13.da6051de.jpg\";","module.exports = __webpack_public_path__ + \"static/media/14.e7f5a3b6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/15.7122f9f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/16.0e278a70.jpg\";","module.exports = __webpack_public_path__ + \"static/media/17.0ef83f28.jpg\";","module.exports = __webpack_public_path__ + \"static/media/18.22da2f16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/19.2a140d64.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.349e0b77.jpg\";","module.exports = __webpack_public_path__ + \"static/media/20.fe02f9b7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/21.563e68f1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/22.4d1860bf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/23.f2d4a177.jpg\";","module.exports = __webpack_public_path__ + \"static/media/24.c824fcac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/25.cff03f46.jpg\";","module.exports = __webpack_public_path__ + \"static/media/26.e02837fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/27.059518e6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/28.f8a6f10d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.a30c1960.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.5809cb08.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.98a126e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c36ef120.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.20c84e78.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.9113d9fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.94d645a2.jpg\";","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nconst STEP_FOR_UNIT = {\n    \"cm\": 0.1,\n    \"in\": 0.01\n}\n\nexport class DimensionInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        const step = STEP_FOR_UNIT[this.props.unit] || 1;\n        return (\n            <Form.Group as={Row} controlId={this.props.id}>\n                <Col md='5'>\n                    <Form.Label\n                        className='labelText' size='sm'>{this.props.label}\n                    </Form.Label>\n                </Col>\n                <Col md='6'>\n                    <InputGroup size='sm'>\n                        <Form.Control\n                            type=\"number\"\n                            placeholder={this.props.label}\n                            step={step}\n                            value={this.props.val}\n                            onChange={this.handleChange}\n                            name={this.props.id}\n                        >\n                        </Form.Control>\n                        <InputGroup.Append>\n                            <InputGroup.Text>{this.props.unit}</InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport class CheckboxInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        return (\n            <Form.Group as={Row} controlId={this.props.id}>\n                <Col md='5'>\n                    <Form.Label\n                        className='labelText' size='sm'>{this.props.label}\n                    </Form.Label>\n                </Col>\n                <Col md='6'>\n                    <Form.Check\n                        value={this.props.val}\n                        onChange={this.handleChange}\n                        name={this.props.id}\n                        className='checkbox'\n                    ></Form.Check>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n","import React from 'react';\n\nexport class Ruler extends React.Component {\n    render() {\n        return (\n            <g>\n                <line\n                    x1='-25' y1='-30'\n                    x2='25' y2='-30'\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px' />\n                <text x='-25' y='-35'\n                    fontSize='4px'\n                    fontFamily='sans-serif'\n                >This line should be 5 cm long when printed</text>\n            </g>\n        )\n    }\n}\n","import React from 'react';\n\nexport class VertexLabels extends React.Component {\n    render() {\n        return (\n            <>\n                {this.props.points.map(point => <g\n                    key={point.label}>\n                    <circle\n                        cx={point.x} cy={point.y}\n                        r='.5'\n                        stroke='black'\n                        >\n\n                    </circle>\n                    {/* <text\n                        x={point.x + 5}\n                        y={point.y}\n                        fontSize='4px'\n                        fontFamily='sans-serif'\n                    >\n                        {point.label}\n                    </text> */}\n                    <text\n                        x={point.x + 2}\n                        y={point.y + 2}\n                        fontSize='4px'\n                        fontFamily='sans-serif'\n                    >\n                        ({point.x.toFixed()}, {point.y.toFixed()})\n                    </text>\n                </g>)\n                }\n            </>)\n    }\n}\n","/**\n * Convert an SVG datauri into a PNG datauri.\n * @param {string} data SVG datauri.\n * @param {number} width Image width.\n * @param {number} height Image height.\n * @param {!Function} callback Callback.\n */\nfunction svgToPng_(data, width, height, callback) {\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  var img = new Image();\n\n  var pixelDensity = 5;\n  canvas.width = width * pixelDensity;\n  canvas.height = height * pixelDensity;\n  img.onload = function () {\n    context.drawImage(\n      img, 0, 0)//, 0, 0, width, height, -50, -50, canvas.width, canvas.height);\n    try {\n      var dataUri = canvas.toDataURL('image/png');\n      callback(dataUri);\n    } catch (err) {\n      console.warn('Error converting the workspace svg to a png');\n      callback('');\n    }\n  };\n  img.src = data;\n}\n\n/**\n* Create an SVG of the blocks on the workspace.\n* @param {!Function} callback Callback.\n*/\nexport function patternToSvg(callback) {\n  const width = 250;\n  const height = 250;\n\n  const svg = cloneSvg();\n  var svgAsXML = (new XMLSerializer()).serializeToString(svg);\n  console.log(svgAsXML);\n  svgAsXML = svgAsXML.replace(/&nbsp/g, '&#160');\n  var data = 'data:image/svg+xml,' + encodeURIComponent(svgAsXML);\n\n\n  svgToPng_(data, width, height, callback);\n}\n\nexport function cloneSvg() {\n\n  var pattern = document.getElementById('maskPattern');\n  var clone = pattern.cloneNode(true);\n  var svg = clone;\n\n  svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svg.setAttribute(\"style\", 'background-color: transparent');\n\n  var css = [].slice.call(document.head.querySelectorAll('style'))\n    .filter(function (el) {\n      return /\\.patternSvg/.test(el.innerText);\n    })\n    .map(function (el) {\n      return el.innerText;\n    })\n    .join('\\n');\n  var style = document.createElement('style');\n  style.innerHTML = css;\n  svg.insertBefore(style, svg.firstChild);\n\n  return svg;\n}\n","export function degreeToRadian(degreeAngle) {\n    return degreeAngle * Math.PI / 180;\n}\n\nexport function radianToDegree(radianAngle) {\n    return 180 * radianAngle / Math.PI;\n}\n\nexport function getX(degreeRadian, hypotenuse) {\n    return Math.cos(degreeRadian) * hypotenuse;\n}\n\nexport function getY(degreeRadian, hypotenuse) {\n    return Math.sin(degreeRadian) * hypotenuse;\n}\n\nexport function getAngleA(a, b, c) {\n    const numerator = b*b + c*c - a*a\n    const denominator = 2 * b * c;\n    return Math.acos(numerator / denominator);\n}","import React from 'react';\n\nexport class PatternPolyline extends React.Component {\n    render() {\n        return (\n            <>\n                <polyline\n                    points={this.props.points}\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px'\n                ></polyline>\n\n            </>)\n    }\n}\n\n","import React from 'react';\n\nconst captions = {\n    'noseToChin': 'Nose to chin',\n    'earHeight': 'Ear height',\n    'earToBridge': 'Ear to nose bridge',\n    'earToNose': 'Ear to nose tip',\n    'bridgeToTip': 'Nose bridge to nose tip',\n}\n\nconst units = 'mm'\n\n/**\n * Prints the values that were entered to create the pattern.\n */\nexport class PatternInfo extends React.Component {\n    makeInfo = function () {\n        const results = [];\n        for (let key in captions) {\n            results.push(captions[key] + ': ' + this.props.vals[key] + ' ' + units)\n        }\n        return results;\n    }\n    render() {\n        return (\n            <>\n                <g\n                    transform='translate(20,15)'\n                    fontSize='3px'\n                    fontFamily='sans-serif'>\n                    <text fontSize='4px' y='-5'>{this.props.vals.patternName}</text>\n                    {\n                        this.makeInfo().map((info, index) =>\n                            <text\n                                key={index}\n                                y={4 * index}>\n                                {info}\n                            </text>)\n                    }\n                </g>\n            </>)\n    }\n}","import React from 'react';\nimport { getX, getY } from './trig';\n\nexport class ArrowDef extends React.Component {\n    render() {\n        return (\n            <>\n                <marker id=\"arrow\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\"\n                    markerWidth=\"6\" markerHeight=\"6\"\n                    orient=\"auto-start-reverse\">\n                    <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                </marker>\n            </>)\n    }\n}\nexport class CutOnFold extends React.Component {\n    makeCoordinates() {\n        const endPointOffset = 10;\n        const cornerOffset = 15;\n\n        const alongLineX = getX(this.props.angle, endPointOffset);\n        const alongLineY = getY(this.props.angle, endPointOffset);\n        const endPoint1 = {\n            x: this.props.nose.x - alongLineX - 1, // ?!\n            y: this.props.nose.y + alongLineY\n        }\n        const endPoint2 = {\n            x: this.props.chin.x - alongLineX,\n            y: this.props.chin.y - alongLineY\n        }\n\n        const oppositeAngle = (Math.PI / 2) - this.props.angle;\n        const awayX = getX(oppositeAngle, cornerOffset);\n        const awayY = getY(oppositeAngle, cornerOffset)\n        const corner1 = {\n            x: endPoint1.x - awayX,\n            y: endPoint1.y - awayY\n        }\n\n        const corner2 = {\n            x: endPoint2.x - awayX,\n            y: endPoint2.y - awayY,\n        }\n        const points = [\n            endPoint1,\n            corner1,\n            corner2,\n            endPoint2\n        ];\n\n        this.values = [];\n        points.forEach(element => this.values.push(element.x, element.y));\n        this.textPath = 'M ' + corner1.x + ', ' + corner1.y + ' L ' + corner2.x + ', ' + corner2.y;\n    }\n    render() {\n        this.makeCoordinates();\n\n        return (\n            <>\n                <polyline\n                    points={this.values}\n                    stroke='black'\n                    fill='none'\n                    strokeWidth='.5px'\n                    markerStart='url(#arrow)'\n                    markerEnd='url(#arrow)'\n                ></polyline>\n                <path d={this.textPath}\n                    stroke='none' id='onFoldPath'></path>\n                <text fontSize='4px'>\n                    <textPath href='#onFoldPath' side='right' startOffset='10%'>Place on fold</textPath>\n                </text>\n            </>)\n    }\n}\n\n","import React from 'react';\nimport fileDownload from 'svg-file-downloader';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Ruler } from './ruler';\nimport { VertexLabels } from './VertexLabels';\nimport { cloneSvg } from './exportSvg';\nimport { degreeToRadian, getX, getY, getAngleA } from './trig';\nimport { PatternPolyline } from './PatternPolyline';\nimport { CutOnFold, ArrowDef } from './CutOnFold';\nimport { PatternInfo } from './PatternInfo';\n\nexport class MaskPattern extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setDimensions(props);\n\n        this.earToNoseRiseAngle = degreeToRadian(5);\n        this.noseChinAngle = degreeToRadian(90);\n        // The width of the tab for the strap, in mm\n        this.tabWidth = 25;\n        this.chinThroatAngle = degreeToRadian(10);\n        this.download = this.download.bind(this);\n    }\n    download() {\n        fileDownload(cloneSvg(), false, this.props.patternName + '.svg');\n    }\n\n    setEarTop() {\n        this.earTop = {\n            x: 0,\n            y: 0,\n            label: \"Ear top\"\n        };\n    }\n\n    setEarBottom() {\n        this.earBottom = {\n            x: 0,\n            y: this.props.earHeight,\n            label: \"Ear bottom\"\n        };\n    }\n\n    setBridgePoint() {\n        // Use the law of cosines on the triangle between points ABC to get the angle.\n        const innerAngle = getAngleA(\n            this.props.bridgeToTip,\n            this.props.earToBridge,\n            this.props.earToNose);\n        const totalAngle = innerAngle + this.earToNoseRiseAngle;\n\n        this.bridgePoint = {\n            x: getX(totalAngle, this.props.earToBridge),\n            y: -getY(totalAngle, this.props.earToBridge),\n            label: \"Bridge of nose\"\n        }\n    }\n\n    setNoseTipPoint() {\n        this.nosePoint = {\n            x: getX(this.earToNoseRiseAngle, this.props.earToNose),\n            y: -getY(this.earToNoseRiseAngle, this.props.earToNose),\n            label: \"Tip of nose\"\n        }\n    }\n\n    roundChin() {\n        const roundingDistance = 20;\n        this.aboveChin = {\n            x: this.chinPoint.x + getX(this.noseChinAngle, roundingDistance),\n            y: this.chinPoint.y - getY(this.noseChinAngle, roundingDistance),\n            label: \"c\"\n        }\n        this.belowChin = {\n            x: this.chinPoint.x - getX(this.chinThroatAngle, roundingDistance),\n            y: this.chinPoint.y + getY(this.chinThroatAngle, roundingDistance),\n            label: \"d\"\n        }\n    }\n\n    roundNose() {        \n        const roundingDistance = 5;\n\n        // tan(angle) = opposite over adjacent\n        const opposite = this.nosePoint.y - this.bridgePoint.y;\n        const adjacent = this.nosePoint.x - this.bridgePoint.x;\n        const bridgeNoseAngle = Math.atan(opposite / adjacent);\n\n        this.aboveNose = {\n            x: this.nosePoint.x - getX(bridgeNoseAngle, roundingDistance),\n            y: this.nosePoint.y - getY(bridgeNoseAngle, roundingDistance),\n            label: \"a\"\n        }\n        this.belowNose = {\n            x: this.nosePoint.x - getX(this.noseChinAngle, roundingDistance),\n            y: this.nosePoint.y + getY(this.noseChinAngle, roundingDistance),\n            label: \"b\"\n        }\n    }\n\n    setChinPoint() {\n        this.chinPoint = {\n            x: this.nosePoint.x - getX(this.noseChinAngle, this.props.noseToChin + 12),\n            y: this.nosePoint.y + getY(this.noseChinAngle, this.props.noseToChin + 12),\n            label: \"Point of chin\"\n        }\n    }\n\n    setThroatPoint() {\n        // Hack to force the chin angle to 10 down and the chin to throat length to about an inch (plus 6mm seam allowance).\n        const x = this.chinPoint.x - getX(this.chinThroatAngle, 31);\n        const y = this.chinPoint.y + getY(this.chinThroatAngle, 31);\n        this.throatPoint = {\n            x: x,\n            y: y,\n            label: \"Throat\"\n        }\n    }\n\n    setTabPoints() {\n        this.tabTop = {\n            x: -this.tabWidth,\n            y: this.earTop.y,\n            label: \"Tab top\"\n        }\n        this.tabBottom = {\n            x: -this.tabWidth,\n            y: this.earBottom.y,\n            label: \"Tab bottom\"\n        }\n    }\n\n    setDimensions() {\n        this.setEarTop();\n        this.setEarBottom();\n        this.setBridgePoint();\n        this.setNoseTipPoint();\n        this.setChinPoint();\n        this.setThroatPoint();\n        this.setTabPoints()\n\n        this.roundChin();\n        this.roundNose();\n    }\n\n    getOutlinePoints() {\n        let points = [\n            this.earTop,\n            this.bridgePoint,\n            this.aboveNose,\n            this.belowNose,\n            this.aboveChin,\n            this.belowChin,\n            this.throatPoint,\n            this.earBottom,\n            this.tabBottom,\n            this.tabTop,\n            this.earTop\n        ];\n         points = [\n            this.earTop,\n            this.tabTop,\n            this.tabBottom,\n            this.earBottom,\n            this.throatPoint\n        ]\n        let values = [];\n        points.forEach(element => values.push(element.x, element.y));\n        return values;\n    }\n\n    /**\n     * Get a list of points that need labels.\n     */\n    getLabelPoints() {\n        return [\n            this.earTop,\n            this.tabTop,\n            this.earBottom,\n            this.tabBottom,\n            this.bridgePoint,\n            this.aboveNose,\n            this.belowNose,\n            this.throatPoint,\n            this.aboveChin,\n            this.belowChin\n        ]\n    }\n\n    getFrontCurvePath() {\n        const points = [\n            this.aboveNose,\n            this.nosePoint,\n            {x: this.nosePoint.x + 10, y: this.nosePoint.y + (this.chinPoint.y - this.nosePoint.y) / 4},\n            {x: this.nosePoint.x , y: this.nosePoint.y + 3 * (this.chinPoint.y - this.nosePoint.y) / 4},\n            this.belowChin,\n            this.throatPoint,\n            this.throatPoint\n        ]\n        let pointStr = '';\n        points.forEach(point =>  {pointStr += point.x + ' ' + point.y + ' ' });\n        let path = 'm ' + this.bridgePoint.x + ' ' + this.bridgePoint.y + ' Q ' + pointStr;\n        return path;\n    }\n\n    getUpperCurvePath() {\n        let xOffset = (this.bridgePoint.x - this.earTop.x) / 3;\n        let yOffset = (this.bridgePoint.y - this.earTop.y) * .8 ;\n        console.log(yOffset)\n        const points = [\n            {x: this.bridgePoint.x - xOffset, y: this.bridgePoint.y - yOffset},\n            this.bridgePoint,\n            this.bridgePoint\n        ];\n        \n        let pointStr = '';\n        points.forEach(point =>  {pointStr += point.x + ' ' + point.y + ' ' });\n        let path = 'm ' + this.earTop.x + ' ' + this.earTop.y + ' Q ' + pointStr;\n        console.log('path is ' + path);\n        return path;\n    }\n    render() {\n        this.setDimensions(this.props);\n\n        return (\n            <>\n                <Col>\n                    <Row>\n                        <Button onClick={this.download}>Download pattern</Button>\n                    </Row>\n                    <Row>\n                        <svg\n                            width='300mm'\n                            height='300mm'\n                            viewBox='-50 -55 250 245'\n                            id='maskPattern'>\n                            <Ruler />\n                            <PatternInfo vals={this.props} />\n                            <g transform='translate(0, 0)'>\n                                    <PatternPolyline points={this.getOutlinePoints()}>\n                                    </PatternPolyline>\n                                <line\n                                    x1={this.earTop.x}\n                                    y1={this.earTop.y}\n                                    x2={this.earBottom.x}\n                                    y2={this.earBottom.y}\n                                    strokeDasharray='4'\n                                    stroke='black'\n                                    strokeWidth='.5px'\n                                >\n                                </line>\n                                <path d={this.getFrontCurvePath()}\n                                    fill='none'\n                                    stroke='black'\n                                    strokeWidth='.5px'\n                                ></path>\n                                <path d={this.getUpperCurvePath()}\n                                    fill='none'\n                                    stroke='black'\n                                    strokeWidth='.5px'\n                                ></path>\n                                {this.props.showLabels &&\n                                    <VertexLabels points={this.getLabelPoints()}></VertexLabels>}\n                            </g>\n                        </svg>\n                    </Row>\n                </Col>\n            </>)\n    }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport class NameInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        return (\n            <Form.Group as={Row} controlId={this.props.id}>\n                <Col md='5'>\n                    <Form.Label\n                        className='labelText' size='sm'>{this.props.label}\n                    </Form.Label>\n                </Col>\n                <Col md='6'>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder={this.props.label}\n                            value={this.props.val}\n                            onChange={this.handleChange}\n                            name={this.props.id}\n                             size='sm'\n                        >\n                        </Form.Control>\n                </Col>\n            </Form.Group>\n        );\n    }\n}\n","\n\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n\nexport class SelectorInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onValueChange(event);\n    }\n    render() {\n        return (\n            <Form.Group as={Row}>\n                <Col md='5'>\n                    <Form.Label\n                    className='labelText'>\n                        {this.props.label}</Form.Label></Col>\n                <Col md='6'>\n                    <Form.Control\n                        as=\"select\"\n                        onChange={this.handleChange}\n                        name={this.props.id}\n                    >  {this.props.options.map(\n                        (item) => \n                        <option \n                        key={item[1]} \n                        value={item[1]}\n                        >\n                            {item[0]}\n                            </option>\n                        )}\n                    </Form.Control></Col></Form.Group>\n        );\n    }\n}    \n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from \"react-bootstrap/Container\";\nimport { DimensionInput } from './DimensionInput';\nimport { CheckboxInput } from './CheckboxInput';\nimport { MaskPattern } from './makePattern';\nimport face_points_lines_labels2 from './face_points_lines_labels2.jpg';\nimport Image from 'react-bootstrap/Image';\nimport { NameInput } from './NameInput';\nimport {SelectorInput} from \"./SelectorInput\";\n\nconst DEFAULT_MEASURES_IN_MM = {\n    noseToChin: 95,\n    earHeight: 45,\n    earToNose: 115,\n    earToThroat: 90,\n    bridgeToTip: 30,\n    earToBridge: 110,\n    chinToThroat: 55\n};\nconst PLACEHOLDER_NAME = 'Your name here';\n\nconst MM_PER_IN = 25.4;\n\n// Converts the canon measure in millimeters to the requested unit, in a conveniently rounded number.\nconst FromMillimetersToUserVisible = {\n    \"mm\": mm => Math.round(mm),\n    \"cm\": mm => Math.round(mm) / 10,  // Rounded to 0.1cm\n    \"in\": mm => Math.round( 100 * mm / MM_PER_IN ) / 100  // Rounded to 0.01in\n}\n\n// Converts the measure in the requested unit to millimeters.\nconst ToMillimeters = {\n    \"mm\": mm => mm,\n    \"cm\": cm => cm * 10,\n    \"in\": inches => inches * MM_PER_IN\n}\n\nfunction buildInitialState() {\n    const state = {\n        unit: 'mm',\n        patternName: PLACEHOLDER_NAME,\n        showLabels: false\n    };\n    Object.keys(DEFAULT_MEASURES_IN_MM).forEach((key) => {\n        const mm = DEFAULT_MEASURES_IN_MM[key];\n        state[key] = mm;\n        state[key + 'InMM'] = mm;\n    });\n    return state;\n}\n\nclass MyForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = buildInitialState();\n        this.handleInputChange =\n            this.handleInputChange.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const name = target.name;\n        if (name === 'unit') {\n            const unit = target.value;\n            const newState = {\n                'unit': unit\n            };\n\n            // Convert existing values to new unit.\n            Object.keys(DEFAULT_MEASURES_IN_MM).forEach((key) => {\n                newState[key] = FromMillimetersToUserVisible[unit](this.state[key+\"InMM\"])\n            });\n\n            this.setState(newState);\n        } else if (name === 'patternName') {\n            this.setState({\n                'patternName': target.value\n            });\n        } else if (name === 'showLabels') {\n            console.log('show labels: ' + target.value);\n            this.setState( {\n                'showLabels': target.checked\n            });\n        } else { // measurementChanged\n            const measure = parseFloat(target.value)\n            const measureInMM = ToMillimeters[this.state.unit](measure)\n            this.setState({\n                [name]: measure,\n                [name + 'InMM']: measureInMM\n            })\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Container fluid>\n                    <Row>\n                        <Col>\n                            <Image\n                                src={face_points_lines_labels2}\n                                width={300}/>\n                        </Col>\n                        <Col as={Form} md={7} lg={8}>\n                            <Row>\n                                <Col>\n                                    <NameInput\n                                        id=\"patternName\"\n                                        label=\"Name\"\n                                        val={this.state.patternName}\n                                        onValueChange={this.handleInputChange}>\n                                    </NameInput>\n                                </Col>\n                                <Col>\n                                    <SelectorInput\n                                        id=\"unit\"\n                                        label=\"Units\"\n                                        options={[\n                                            [\"mm\", \"mm\"],\n                                            [\"cm\", \"cm\"],\n                                            [\"inches\", \"in\"]\n                                        ]}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <DimensionInput\n                                        id=\"earToBridge\"\n                                        label=\"Ear top to nose bridge (A to B)\"\n                                        unit={this.state.unit}\n                                        val={this.state.earToBridge}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                    <DimensionInput\n                                        id=\"earToNose\"\n                                        label=\"Ear top to nose tip (A to C)\"\n                                        unit={this.state.unit}\n                                        val={this.state.earToNose}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                    <DimensionInput\n                                        id=\"bridgeToTip\"\n                                        label=\"Nose bridge to nose tip (B to C)\"\n                                        unit={this.state.unit}\n                                        val={this.state.bridgeToTip}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                </Col>\n                                <Col>\n                                    <DimensionInput\n                                        id=\"noseToChin\"\n                                        label=\"Nose to chin with mouth open to talk (C to D)\"\n                                        unit={this.state.unit}\n                                        val={this.state.noseToChin}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                    {/* <DimensionInput\n                                        id=\"chinToThroat\"\n                                        label=\"Chin to throat (D to E)\"\n                                        unit={this.state.unit}\n                                        val={this.state.chinToThroat}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                    <DimensionInput\n                                        id=\"earToThroat\"\n                                        label=\"Throat to ear bottom (E to F)\"\n                                        unit={this.state.unit}\n                                        val={this.state.earToThroat}\n                                        onValueChange={this.handleInputChange}\n                                    /> */}\n                                    <DimensionInput\n                                        id=\"earHeight\"\n                                        label=\"Ear height (A to F)\"\n                                        unit={this.state.unit}\n                                        val={this.state.earHeight}\n                                        onValueChange={this.handleInputChange}\n                                    />\n                                    {/* <CheckboxInput\n                                        id=\"showLabels\"\n                                        label=\"Show labels\"\n                                        onValueChange={this.handleInputChange}\n                                        /> */}\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Container>\n                <Container>\n                    <MaskPattern\n                        patternName={this.state.patternName}\n                        noseToChin={Math.ceil(this.state.noseToChinInMM)}\n                        earHeight={Math.ceil(this.state.earHeightInMM)}\n                        earToNose={Math.ceil(this.state.earToNoseInMM)}\n                        earToThroat={Math.ceil(this.state.earToThroatInMM)}\n                        bridgeToTip={Math.ceil(this.state.bridgeToTipInMM)}\n                        earToBridge={Math.ceil(this.state.earToBridgeInMM)}\n                        chinToThroat={Math.ceil(this.state.chinToThroatInMM)}\n                        showLabels={this.state.showLabels}\n                    />\n                </Container>\n            </>\n        );\n    }\n}\nexport default MyForm;\n","import React from 'react';\n\nconst cache = {};\n\nfunction importAll(r) {\n  r.keys().forEach(key => cache[key] = r(key));\n}\n\nimportAll(require.context('./', true, /\\.jpg$/));\n// At build-time cache will be populated with all required modules.\n\nexport class SewingImage extends React.Component {\n  render() {\n    return (\n      <img\n          src={cache['./' + this.props.imgName + '.jpg']}\n          alt=\"\"\n          className='instructionalImage'\n        />\n    );\n  }\n}","import React from 'react';\nimport { SewingImage } from './images/sewingImages.js';\n\nexport class SewingInstructions extends React.Component {\n    render() {\n        return (\n            <>\n                <h2>Create your pattern</h2>\n                <p>\n                    Measure your face and use the Create Pattern tab to create and download your pattern.\n                </p>\n                <p>\n                    Open your pattern with a browser and print it.\n                </p>\n                <p>\n                    Use a ruler to check that the line at the top left is 5 cm long.\n                </p>\n                <p>\n                    If it's the wrong length, adjust your print settings until the line is the correct length.\n                </p>\n\n                <h2>Cutting and sewing</h2>\n                <p>Follow the instructions in <a href=\"https://www.youtube.com/watch?v=KBR98YKAr7w&list=WL\">this excellent video</a> to make your mask.</p>\n                <p>To cut the lining fabric, cut along the dashed line at the ear.  Cut on the solid line for the main fabric.</p>\n\n{/*                 \n                <h2>\n                    Cut your pattern and fabric\n                </h2>\n                <p>\n                    Cut your paper pattern out, including the tab to the left of the ear.\n                </p>\n                <p>\n                    Fold your fabric in half and place the tip-of-nose to point-of-chin line on the fold.\n                </p>\n                <SewingImage imgName={'1'} />\n                <p>\n                    Cut two pieces on fold. In these images I am using a green fabric (marked 'A') for the liner and a blue fabric (marked 'B') for the outside.\n                </p>\n                <SewingImage imgName={'5'} />\n                <p>\n                    Fold each piece along the tip-of-nose to point-of-chin line, right sides together.\n                </p>\n                <SewingImage imgName={'6'} />\n                <p>\n                    On each piece, sew from the bridge of the nose to the tip of the nose and fron the point of the chin to the throat, using a 1/4\" (6mm) seam allowance.\n                </p>\n                <SewingImage imgName={'8'} />\n                <p>\n                    In these images I'm using a white thread top thread and a red bottom thread for clarity. Normally I would use a thread that matches or contrasts with the outside fabric.\n                </p>\n                <SewingImage imgName={'9'} />\n                <p>\n                    On each piece, clip the corners at the tip of nose and point of chin. Clipping makes it easier to press the seams in the next step.\n                </p>\n                <SewingImage imgName={'10'} />\n                <p>\n                    Press the seams open. Pressing the seams now reduces bulk for later, when you will need to sew over these seams, and makes it less likely that your machine will catch.\n                </p>\n                <SewingImage imgName={'11'} />\n                <p>\n                    Flip one piece (it doesn't matter which) so that the seams are inside, and press.\n                </p>\n                <SewingImage imgName={'12'} />\n                <p>\n                    Place the two pieces against each other, right sides touching.\n                </p>\n                <SewingImage imgName={'14'} />\n                <p>\n                    Sew the top and bottom edges with a 1/4\" (6mm) seam allowance.\n                </p>\n                <SewingImage imgName={'15'} />\n                <p>\n                    Note that the pressed seam was easy to sew over here.\n                </p>\n                <SewingImage imgName={'16'} />\n                <p>\n                    Flip the mask inside out.\n                </p>\n                <SewingImage imgName={'17'} />\n                <p>\n                    Press.\n                </p>\n                <SewingImage imgName={'18'} />\n                <p>\n                    Topstitch along the top and bottom edges. (Note: I swapped the order and did the nose bridge before the topstitching in these images.)\n                </p>\n                <SewingImage imgName={'22'} />\n                <h2>\n                    Add a nose bridge\n                </h2>\n                <p>\n                    Cut out an 8cm piece of ribbon or bias tape. It should be about 1 cm wide and 8cm long, but the exact dimensions are not important.\n                </p>\n                <SewingImage imgName={'19'} />\n                <p>\n                    Center your ribbon or tape at the center point of the mask on the top edge, on the inside of the mask.\n                </p>\n                <SewingImage imgName={'20'} />\n                <p>\n                    Sew your ribbon or tape in place along the long top and bottom edges, leaving the left and right edges open.\n                </p>\n                <SewingImage imgName={'21'} />\n                <h2>\n                    Form the tunnels that will hold the straps\n                </h2>\n                <p>\n                    On the left side of the mask, fold in 1/4\" (6mm) of fabric toward the inside of the mask and press.\n                </p>\n                <SewingImage imgName={'23'} />\n                <p>\n                    Fold again, bringing the edge to the line between the ear top and ear bottom, and press.\n                </p>\n                <SewingImage imgName={'24'} />\n                <p>\n                    Sew the flap in place, creating a tunnel for the strap.\n                </p>\n                <SewingImage imgName={'25'} />\n                <p>\n                    Repeat for the right side.\n                </p>\n\n                <SewingImage imgName={'26'} />\n\n                <h2>\n                    Form the nose bridge\n                </h2>\n                <p>\n                    Insert a piece of wire (e.g. a paperclip) into the ribbon.\n                </p>\n                <SewingImage imgName={'27'} />\n\n                <SewingImage imgName={'28'} />\n                <p>\n                    Hold the mask up to your face and pinch the wire against the bridge of your nose to form it to the shape of your nose.\n                </p>\n                <h2>\n                    Add straps\n                </h2>\n                <p>\n                    For an ear-loop strap, use the string to measure the length around the back of your ear from the top to the bottom (points A to F, around the back of the ear).\n                </p>\n                <p>\n                    Cut two pieces of elastic of the measured length.\n                </p>\n                <p>\n                    Stuff one end of the elastic into the top of the left tunnel, and the other end into the bottom of the left tunnel.\n                </p>\n                <p>\n                    Sew in place.\n                </p>\n                <p>\n                    Repeat for the right side.\n                </p>\n                <p>\n                    For an over-the head strap, use the string to measure the length from the top of your left ear to the top of your right ear, going up almost to the crown of your head.\n                </p>\n                <p>\n                    Cut a piece of elastic of the correct size, and sew it from the top of the left tunnel to the top of the right tunnel.\n                </p>\n                <p>\n                    Use the string to measure the length from the bottom of your left ear to the bottom of your right ear, going around the back of your neck.\n                </p>\n                <p>\n                    Cut a piece of elastic of the correct size, and sew it from the bottom of the left tunnel to the bottom of the right tunnel.\n                </p>\n                <p>\n                    There are many other ways to set up your straps, including a single strap that runs through the tunnels and is adjusted with a toggle or by tying it when you put the mask on.\n                </p> */}\n            </>);\n    }\n}\n","import React from 'react';\nimport Figure from 'react-bootstrap/Figure';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nexport class MeasurementFigure extends React.Component {\n    render() {\n        return (\n            <ListGroup.Item justify='center'>\n            <Figure>\n                <Figure.Image\n                    src={this.props.imgSrc}\n                    width={500}\n                    height={500}\n                    fluid></Figure.Image>\n                <Figure.Caption>{this.props.caption}</Figure.Caption>\n            </Figure>\n            </ListGroup.Item>)\n    }\n}\n\n","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nexport class ItemDescription extends React.Component {\n    render() {\n        return (\n            <ListGroup horizontal>\n            <ListGroup.Item>{this.props.itemName}</ListGroup.Item>\n            <ListGroup.Item>{this.props.description}</ListGroup.Item>\n            </ListGroup>)\n    }\n}\n\n","import React from 'react';\nimport face_points_labels_2 from './face_points_labels_2.jpg';\nimport face_points_lines_labels2 from './face_points_lines_labels2.jpg';\nimport face_points_lines2 from './face_points_lines2.jpg';\n\nimport { MeasurementFigure } from './MeasurementFigure';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { ItemDescription } from './ItemDescription';\n\nexport class MeasurementInstructions extends React.Component {\n    render() {\n        return (\n            <>\n                <ListGroup variant='flush'>\n                    <MeasurementFigure\n                        imgSrc={face_points_labels_2}\n                        caption='To size your mask you will measure the distances between a few points on your face.'>\n                    </MeasurementFigure>\n                    <ItemDescription\n                        itemName='A'\n                        description='The top of your ear'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='B'\n                        description='The bridge of your nose'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='C'\n                        description='The tip of your nose'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='D'\n                        description='The point of your chin'>\n                    </ItemDescription>\n                    {/* <ItemDescription\n                        itemName='E'\n                        description='The top of your throat. The mask will hook under your chin and back to this point, to keep it snug when you are talking'>\n                    </ItemDescription> */}\n                    <ItemDescription\n                        itemName='F'\n                        description='The bottom of your ear, just above the end of your jawbone'>\n                    </ItemDescription>\n                    <MeasurementFigure\n                        imgSrc={face_points_lines2}\n                        caption='This image shows the lines you will measure.'>\n                    </MeasurementFigure>\n                    <ListGroup.Item>To make these measurements, you need a string and a ruler.</ListGroup.Item>\n                    <ListGroup.Item>Start by cutting a piece of string about six inches long and tying a knot at one end.</ListGroup.Item>\n                    <ListGroup.Item>To measure a single line, place the knot at the start point on your face and hold it in place with a finger.</ListGroup.Item>\n                    <ListGroup.Item>Use your other hand to pull the string to the end point.</ListGroup.Item>\n                    <ListGroup.Item>Mark the end point by pinching the string with your fingers.</ListGroup.Item>\n                    <ListGroup.Item>Keeping the end point pinched, lay the string along the ruler to measure the length from the knot to the end point.</ListGroup.Item>\n                    <MeasurementFigure\n                        imgSrc={face_points_lines_labels2}\n                        caption='This image shows the lines that you will measure, along with the labeled points.'>\n                    </MeasurementFigure>\n                    <ItemDescription\n                        itemName='A to B'\n                        description='The top of your ear to the bridge of your nose, following your cheekbone.'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='A to C'\n                        description='The top of your ear to the point of your nose.'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='B to C'\n                        description='The bridge of your nose to the point of your nose.'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='C to D'\n                        description='The point of your nose to the tip of your chin. Measure this with your mouth open, as though you were talking.'>\n                    </ItemDescription>\n                    {/* <ItemDescription\n                        itemName='D to E'\n                        description='The point of your chin to the front of your throat. The mask will hook under your chin back to this point, to keep it snug when you are talking.'>\n                    </ItemDescription>\n                    <ItemDescription\n                        itemName='E to F'\n                        description='The front of your throat to the bottom of your ear.'>\n                    </ItemDescription> */}\n                    <ItemDescription\n                        itemName='A to F'\n                        description='The top of your ear to the bottom of your ear.'>\n                    </ItemDescription>\n                </ListGroup>\n            </>\n        );\n    }\n}\n\n","\nimport React from 'react';\nimport Jumbotron from 'react-bootstrap/Figure';\nimport face_mask_earloop from './face_mask_earloop.jpg';\nimport face_mask_laces from './face_mask_laces.jpg';\n\nexport class Introduction extends React.Component {\n    render() {\n        return (\n            <Jumbotron>\n                <h1>Custom Mask Pattern Generator</h1>\n                <p>This is a utility for generating sewing patterns for custom masks, based on the dimensions of your face.</p>\n                <p>My goals for the pattern are:</p>\n                <ul>\n                    <li>The mask stays up when you talk.</li>\n                    <li>The mask has minimal bulk in front of your mouth.</li>\n                    <li>The mask fits snugly, with no gaping at the nose, chin, or ears.</li>\n                </ul>\n                <p>I'm still iterating on the pattern and trying to dial in my math--if it doesn't fit right on you, please let me know and/or come back in a week to try again.</p>\n                <p>Use the tabs at the top of the page to navigate.</p>\n\n                <img\n                    src={face_mask_earloop}\n                    height='500'\n                    alt='Our model wearing a face mask with elastic earloops.'>\n                </img>\n                <img\n                    src={face_mask_laces}\n                    height='500'\n                    alt='Our model wearing a face mask with laces behind the neck and over the top of the head.'>\n                </img>\n\n\n                <p>Made by Rachel Fenichel. Last updated July 25 2020.</p>\n            </Jumbotron>)\n    }\n}\n\n","import React from 'react';\n\n\nexport class Feedback extends React.Component {\n    render() {\n        return (\n            <>\n                <p className='feedbackText'>Do you have suggestions for improving this tool? Have you found a bug in my math? Do you think my math checks out but my assumptions are wrong? </p>\n                <p className='feedbackText'>Fill out the <a href=\"https://forms.gle/maSWbYPFmoq8v5DE7\">feedback form</a>, or head over to <a href=\"https://github.com/fenichel/mask-pattern-generator/issues\">my GitHub repo</a> to file issues or make pull requests.</p>\n            </>)\n    }\n}\n","import React from 'react';\n\nimport Image from 'react-bootstrap/Image'\nimport MathJax from 'react-mathjax'\nimport theMath from './theMath.svg';\n\n\nexport class TheMath extends React.Component {\n    render() {\n        return (\n            <MathJax.Provider>\n                <p>I made a few starting assumptions:</p>\n                <ul>\n                    <li>The angle from the top of the ear to the point of the nose is five degrees up.</li>\n                    <li>The angle from the point of the nose to the chin is five degrees toward the ear. </li>\n                    <li>Measurements are generally too large for a snug fit, so I don't need to add extra seam allowance.</li>\n                    <li>The exception is the nose-to-chin measurement, which I expect to be fairly accurate. I added 12mm to the user value to have seam allowance on both ends.</li>\n                    <li>The tab size (for attaching the straps) is fixed at 25mm wide.</li>\n                    <li>The angle from the chin to the point on the throat is fixed at 100 degrees.</li>\n                    <li>The chin to throat length is 25mm (about an inch) plus 6mm of seam allowance. Thie is enough to hook back under the throat while talking, without pressing into the throat.</li>\n                    <li>I can approximate curves with straight lines to round the nose and chin.</li>\n                </ul>\n                <p>I'm trying to map from a few critical measurements to a flat pattern, but that flat pattern has to take into account the curvature of the human face.</p>\n                <p>I'm accomplishing that by mirroring on the line from the nose to the chin, and essentially applying darts above the nose and below the chin.</p>\n                <p>Since I only used straight lines, finding the coordinates of all of my critical points involved drawing lots of triangles:</p>\n                <Image src={theMath} />\n                <ul>\n                    <li>Point A is at the origin (0, 0).</li>\n                    <li>Point F is directly below A. The vertical distance between them is given by the measured ear height.</li>\n                    <li>Point B is the bridge of the nose. We know AB, AC, and BC, so we can find the angle θ1:</li>\n                    <ul>\n                        <li>\n                            The law of cosines says <MathJax.Node inline formula={'c^2 = a^2 + b^2 − 2ab\\\\, cos(C)'}/>\n                        </li>\n                        <li>\n                            <MathJax.Node inline formula={'θ1 = arccos((b^2 + c^2 - a^2) / 2bc)'}/>\n                        </li>\n                        <li>\n                            In this case,<MathJax.Node inline formula={'a = BC'}/>, <MathJax.Node inline formula={'b = AB'}/>, and <MathJax.Node inline formula={'c = AC'}/>\n                        </li>\n                    </ul>\n                    <li>I assumed a five degree angle up from the top of the ear to the nose. We know the distance from A to C, so:</li>\n                    <ul>\n                        <li>\n                          <MathJax.Node inline formula={'Cx = cos(5^\\\\circ) \\\\cdot AC'}/>\n                        </li>\n                        <li>\n                          <MathJax.Node inline formula={'Cy = sin(5^\\\\circ) \\\\cdot AC'}/>\n                        </li>\n                    </ul>\n                    <li>The rest of the coordinates can be found by similar applications of the law of cosines and SOHCAHTOA, and are left as an exercise for the reader.</li>\n                </ul>\n            </MathJax.Provider>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport MyForm from './Form.js';\nimport { SewingInstructions } from './SewingInstructions';\nimport { MeasurementInstructions } from './MeasurementInstructions';\nimport { Introduction } from './Introduction';\nimport { TheMath } from './TheMath';\nimport { Feedback } from './Feedback';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs\n        defaultActiveKey=\"introduction\"\n        id=\"navtabs\"\n        transition={false}>\n          <Tab eventKey=\"introduction\" title=\"Introduction\">\n            <Introduction />\n          </Tab>\n        <Tab eventKey=\"measuring\" title=\"Measurement instructions\">\n\n          <MeasurementInstructions />\n        </Tab>\n        <Tab eventKey=\"createPattern\" title=\"Create Pattern\">\n          <MyForm />\n        </Tab>\n        <Tab eventKey=\"sewing\" title=\"Sewing instructions\">\n          <SewingInstructions />\n        </Tab>\n        {/* <Tab eventKey=\"theMath\" title=\"Show me the math!\">\n          <TheMath className='theMath' />\n        </Tab> */}\n      </Tabs>\n    <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}